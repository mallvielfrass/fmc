package main

import (
	"fmt"
	"reflect"
	"testing"
	"time"

	"github.com/dgrijalva/jwt-go"
)

type ClaimsToken struct {
	Username string `json:"username"`

	jwt.StandardClaims
}
type AutoGenerated struct {
	Sub  string `json:"sub"`
	Name string `json:"name"`
	Iat  int    `json:"iat"`
	jwt.StandardClaims
}
type Credentials struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

var jwtKey = []byte("hgv45445r")

func isStruct(i interface{}) {
	if reflect.ValueOf(i).Kind() == reflect.Ptr {
		v, ok := i.(struct{})
		if ok {
			fmt.Println(v)
		} else {
			fmt.Println("err")
		}
	}
}
func TestMain(t *testing.T) {
	atClaims := ClaimsToken{}
	atClaims.Username = "js"

	atClaims.ExpiresAt = time.Now().Add(time.Minute * 15).Unix()
	at := jwt.NewWithClaims(jwt.SigningMethodHS256, atClaims)
	token, err := at.SignedString(jwtKey)
	if err != nil {
		t.Error(err)
	}
	//	fmc.Printfln(token)
	cl := &ClaimsToken{}
	_, err = jwt.ParseWithClaims(token, cl, func(token *jwt.Token) (interface{}, error) {
		if err != nil {
			t.Error(err)
		}
		return jwtKey, nil
	})
	//fmt.Printf("Name:= %v\n", cl.Username)
	//fmc.PrintStruct(*cl)
	//fmt.Println(reflect.ValueOf(cl).Kind())
	isStruct(cl)
}
